name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install jq (Ubuntu)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y jq
      
    - name: Install jq (macOS)
      if: runner.os == 'macOS'
      run: brew install jq
      
    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Download jq directly to avoid PATH issues
        curl -L -o /usr/bin/jq.exe https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-win64.exe
        chmod +x /usr/bin/jq.exe
        # Git Bash on Windows automatically finds .exe files
        # Verify jq works
        jq --version
      shell: bash
      
    - name: Check dependencies
      run: |
        bash --version
        jq --version
        curl --version | head -1
      shell: bash
        
    - name: Make scripts executable
      run: |
        chmod +x install.sh
        chmod +x tools/hello/world
        chmod +x tools/wiki/search
        chmod +x tests/*.sh
      shell: bash
        
    - name: Run test suite
      run: |
        chmod +x tests/run_ci.sh
        bash tests/run_ci.sh
      shell: bash
      
    - name: Test installer from GitHub
      run: |
        # Test that the installer can handle list mode
        # (may return empty list if API is unavailable)
        AGENT_MODE=1 bash ./install.sh --list | jq -e '.status == "success"'
      shell: bash
        
    - name: Test local installation
      run: |
        echo "Starting test..."
        
        # Test actual installation
        # Use temp directory that works on all platforms
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          # Use Git Bash temp directory on Windows
          TESTDIR="/tmp/test-install"
        else
          TESTDIR="${RUNNER_TEMP:-/tmp}/test-install"
        fi
        echo "Test directory: $TESTDIR"
        mkdir -p "$TESTDIR"
        
        # Debug: Check what files exist
        echo "=== Debug: File system check ==="
        echo "Files in tools/:"
        ls -la tools/
        echo "---"
        echo "Files in tools/hello/:"
        ls -la tools/hello/
        echo "---"
        echo "Files in tools/wiki/:"
        ls -la tools/wiki/
        echo "---"
        
        # Debug file type detection
        echo "=== Debug: File type detection ==="
        file tools/hello/world || echo "file command failed"
        stat tools/hello/world 2>/dev/null || echo "stat failed"
        [[ -f tools/hello/world ]] && echo "world is a file" || echo "world is NOT a file"
        [[ -x tools/hello/world ]] && echo "world is executable" || echo "world is NOT executable"
        echo "---"
        
        # Debug the installer's namespace discovery
        echo "=== Debug: Namespace discovery ==="
        TOOLS_BASE_DIR="tools"
        echo "Looking for directories in $TOOLS_BASE_DIR/*"
        for dir in "$TOOLS_BASE_DIR"/*; do
            echo "Found path: $dir"
            if [[ -d "$dir" ]]; then
                echo "  -> IS a directory: $(basename "$dir")"
                for file in "$dir"/*; do
                    echo "    Checking: $file"
                    if [[ -f "$file" ]]; then
                        echo "      -> IS a file: $(basename "$file")"
                    else
                        echo "      -> NOT a file"
                    fi
                done
            else
                echo "  -> NOT a directory"
            fi
        done
        echo "---"
        
        # First check if installer can list tools
        echo "=== Running installer --list ==="
        AGENT_MODE=1 bash ./install.sh --list || echo "List failed"
        echo "---"
        
        # Install (will use agent mode in CI)
        echo "Installing hello.world..."
        INSTALL_RESULT=$(INSTALL_DIR="$TESTDIR" FORCE=1 bash ./install.sh hello.world 2>&1) || {
          echo "Installation failed with exit code: $?"
          echo "Output: $INSTALL_RESULT"
          exit 1
        }
        echo "$INSTALL_RESULT"
        
        # Verify installation succeeded via JSON output
        echo "Verifying installation..."
        echo "$INSTALL_RESULT" | jq -e '.status == "success"' > /dev/null || {
          echo "Status check failed"
          echo "$INSTALL_RESULT" | jq '.'
          exit 1
        }
        
        # Verify file exists
        echo "Checking file exists..."
        test -f "$TESTDIR/hello.world" || {
          echo "File not found: $TESTDIR/hello.world"
          ls -la "$TESTDIR/"
          exit 1
        }
        
        # Test the tool works
        echo "Testing tool..."
        echo '{"name":"CI"}' | "$TESTDIR/hello.world" | jq -e '.ok == true' > /dev/null || {
          echo "Tool test failed"
          exit 1
        }
        
        echo "All tests passed!"
      shell: bash
        
  shellcheck:
    name: ShellCheck
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@master
      with:
        ignore_paths: tests
        severity: error
        check_together: yes
        
  bash-compatibility:
    name: Bash Compatibility Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for Bash 4+ features
      run: |
        echo "Checking for associative arrays (Bash 4+ feature)..."
        # Check for actual declarations, not in comments or test files
        if grep -r '^[[:space:]]*declare[[:space:]]\+-A' . --include="*.sh" --exclude-dir=.git --exclude-dir=tests; then
          echo "ERROR: Found Bash 4+ associative arrays"
          exit 1
        else
          echo "✓ No associative arrays found"
        fi
        
        echo "Checking for mapfile (Bash 4+ feature)..."
        if grep -r '^[[:space:]]*mapfile' . --include="*.sh" --exclude-dir=.git --exclude="install.sh"; then
          echo "ERROR: Found Bash 4+ mapfile usage"
          exit 1
        else
          echo "✓ No mapfile usage found"
        fi
        
  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation files exist
      run: |
        for file in README.md LICENSE.md CLAUDE.md docs/api-contract.md docs/development.md docs/installation.md; do
          if [[ ! -f "$file" ]]; then
            echo "ERROR: Missing documentation file: $file"
            exit 1
          else
            echo "✓ Found: $file"
          fi
        done
        
    - name: Check tool documentation
      run: |
        for tool in tools/*/*; do
          if [[ -f "$tool" ]]; then
            echo "Checking $tool..."
            if ! $tool --help > /dev/null 2>&1; then
              echo "ERROR: $tool missing --help"
              exit 1
            fi
            if ! $tool --schema > /dev/null 2>&1; then
              echo "ERROR: $tool missing --schema"
              exit 1
            fi
          fi
        done
        echo "✓ All tools have documentation"